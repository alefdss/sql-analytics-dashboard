import asyncio
import asyncpg
import httpx
import json
import re
import uuid
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

DB_USER = os.getenv("POSTGRES_USER")
DB_PASSWORD = os.getenv("POSTGRES_PASSWORD")
DB_NAME = os.getenv("POSTGRES_DB")
DB_HOST = os.getenv("POSTGRES_HOST", "localhost")
DB_PORT = int(os.getenv("POSTGRES_PORT", 5432))

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

questions = [
    {"id": 1, "text": "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è?", "type": "scale_1_5"},
    {"id": 2, "text": "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤—ã –ø–æ—Å–≤—è—Ç–∏–ª–∏ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ —É—á–µ–±–µ —Å–µ–≥–æ–¥–Ω—è?", "type": "choice",
     "options": ["<2", "2‚Äì4", "4‚Äì6", ">6"]},
    {"id": 3, "text": "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –æ—Ç–≤–ª–µ–∫–∞–ª–∏—Å—å –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏ –∏–ª–∏ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –¥–µ–ª–∞?", "type": "scale_1_5"},
    {"id": 4, "text": "–ö–∞–∫–æ–µ —É –≤–∞—Å –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–Ω—è?", "type": "scale_1_5"},
    {"id": 5, "text": "–ß—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ –ª–∏ –≤—ã —Å—Ç—Ä–µ—Å—Å –∏–ª–∏ —Ç—Ä–µ–≤–æ–≥—É —Å–µ–≥–æ–¥–Ω—è?", "type": "scale_1_5"},
    {"id": 6, "text": "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ —Å–µ–≥–æ–¥–Ω—è?", "type": "scale_1_5"},
    {"id": 7, "text": "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤—ã —Å–ø–∞–ª–∏ –ø—Ä–æ—à–ª–æ–π –Ω–æ—á—å—é?", "type": "choice",
     "options": ["<5", "5‚Äì6", "6‚Äì8", ">8"]},
    {"id": 8, "text": "–£–¥–µ–ª—è–ª–∏ –ª–∏ –≤—ã –≤—Ä–µ–º—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è?", "type": "choice",
     "options": ["–î–∞, –±–æ–ª–µ–µ 30 –º–∏–Ω", "–î–∞, –º–µ–Ω–µ–µ 30 –º–∏–Ω", "–ù–µ—Ç"]},
    {"id": 9, "text": "–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã –≤—ã–ø–∏–ª–∏ –∑–∞ –¥–µ–Ω—å?", "type": "choice",
     "options": ["<1 –ª", "1‚Äì2 –ª", ">2 –ª"]},
    {"id": 10, "text": "–ú–µ–¥–∏—Ç–∏—Ä–æ–≤–∞–ª–∏, —á–∏—Ç–∞–ª–∏ –∏–ª–∏ –∑–∞–Ω–∏–º–∞–ª–∏—Å—å —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–µ–π —Å–µ–≥–æ–¥–Ω—è?", "type": "choice",
     "options": ["–î–∞", "–ù–µ—Ç"]}
]

# —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}
db_pool = None

start_polling_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")]], resize_keyboard=True
)

async def init_db_pool():
    global db_pool
    db_pool = await asyncpg.create_pool(
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME,
        host=DB_HOST,
        port=DB_PORT
    )

async def create_tables():
    async with db_pool.acquire() as conn:
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS users (user_id BIGINT PRIMARY KEY);
        """)
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS responses (
            id SERIAL PRIMARY KEY,
            user_id BIGINT REFERENCES users(user_id),
            question_id INT NOT NULL,
            answer TEXT NOT NULL,
            survey_id UUID NOT NULL,
            created_at TIMESTAMP DEFAULT now()
        );
        """)

def get_keyboard(q):
    if q["type"] == "scale_1_5":
        return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=str(i)) for i in range(1, 6)]], resize_keyboard=True)
    elif q["type"] == "choice":
        return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=opt)] for opt in q["options"]], resize_keyboard=True)
    return None

def clean_report(text: str) -> str:
    text = re.sub(r'^\s*\*\s+', '‚Ä¢ ', text, flags=re.MULTILINE)
    text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)
    text = re.sub(r'^#{1,6}\s*', '', text, flags=re.MULTILINE)
    text = re.sub(r'([–ê-–Ø–∞-—èA-Za-z0-9])\:([^\s])', r'\1: \2', text)

    lines = text.splitlines()
    cleaned = []
    headers = ["–û—Ç—á—ë—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–û–±—â–∏–π –≤—ã–≤–æ–¥:", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
               "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üòÑ:", "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üìà:", "–≠–Ω–µ—Ä–≥–∏—è ‚ö°Ô∏è:"]
    for line in lines:
        line = line.strip()
        if line in headers:
            if cleaned and cleaned[-1] != "": cleaned.append("")
            cleaned.append(line); cleaned.append("")
        elif line != "":
            cleaned.append(line)
        else:
            if cleaned and cleaned[-1] != "": cleaned.append("")
    return "\n".join(cleaned)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    survey_id = str(uuid.uuid4())
    user_states[user_id] = {"q_index": 0, "survey_id": survey_id}

    async with db_pool.acquire() as conn:
        await conn.execute("INSERT INTO users (user_id) VALUES ($1) ON CONFLICT DO NOTHING", user_id)

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø—Ä–∏–≤—ã—á–µ–∫.\n\n"
        "–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ 10 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.\n\n"
        "–í –∫–æ–Ω—Ü–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.\n\n–ù–∞—á–Ω–µ–º!",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(questions[0]["text"], reply_markup=get_keyboard(questions[0]))

@dp.message(Command("results"))
async def cmd_results(message: types.Message):
    user_id = message.from_user.id
    async with db_pool.acquire() as conn:
        survey_row = await conn.fetchrow("""
            SELECT survey_id
            FROM responses
            WHERE user_id = $1
            ORDER BY created_at DESC
            LIMIT 1
        """, user_id)

        if not survey_row:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞ üôÉ –ù–∞–∂–º–∏ ¬´–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å¬ª.")
            return

        survey_id = survey_row["survey_id"]
        rows = await conn.fetch("""
            SELECT question_id, answer
            FROM responses
            WHERE user_id = $1 AND survey_id = $2
            ORDER BY id
        """, user_id, survey_id)

    if not rows:
        await message.answer("–û—Ç–≤–µ—Ç–æ–≤ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï")
        return

    user_data = [
        f"–í–æ–ø—Ä–æ—Å: {next(q['text'] for q in questions if q['id']==row['question_id'])} –û—Ç–≤–µ—Ç: {row['answer']}"
        for row in rows
    ]

    prompt_text = (
        "–°–¥–µ–ª–∞–π –æ—Ç—á—ë—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö **–∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å** (—Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –Ω–∞–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤).\n"
        "–î–æ–±–∞–≤—å –æ–±—â–∏–π –≤—ã–≤–æ–¥ –≤ –Ω–∞—á–∞–ª–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üòÑ, –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üìà, –≠–Ω–µ—Ä–≥–∏—è ‚ö°Ô∏è.\n"
        "–ö–∞–∂–¥—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ñ–æ—Ä–º–∏ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å ‚Ä¢ –∏ –¥–æ–±–∞–≤—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏.\n\n"
        + "\n\n".join(user_data)
    )

    try:
        async with httpx.AsyncClient(timeout=30) as client:
            json_data = {"contents": [{"parts": [{"text": prompt_text}]}]}
            response = await client.post(
                "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
                headers={"Content-Type": "application/json", "X-goog-api-key": GEMINI_API_KEY},
                content=json.dumps(json_data, ensure_ascii=False).encode("utf-8")
            )
            result_json = response.json()
            candidates = result_json.get("candidates", [])
            if candidates and "content" in candidates[0]:
                gemini_text = "\n".join([part.get("text", "") for part in candidates[0]["content"].get("parts", [])])
            else:
                gemini_text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –æ—Ç Gemini."
    except Exception as e:
        gemini_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: " + str(e)

    await message.answer("üìù –í–∞—à –æ—Ç—á—ë—Ç –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ–ø—Ä–æ—Å—É:")
    await message.answer(clean_report(gemini_text))

@dp.message()
async def process_answer(message: types.Message):
    user_id = message.from_user.id

    if message.text == "–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å":
        await cmd_start(message)
        return

    if user_id not in user_states:
        await message.answer("–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å.")
        return

    q_index = user_states[user_id]["q_index"]
    survey_id = user_states[user_id]["survey_id"]
    q = questions[q_index]

    if (q["type"] == "scale_1_5" and message.text not in [str(i) for i in range(1, 6)]) or \
       (q["type"] == "choice" and message.text not in q["options"]):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=get_keyboard(q))
        return

    async with db_pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO responses (user_id, question_id, answer, survey_id) VALUES ($1, $2, $3, $4)",
            user_id, q["id"], message.text, survey_id
        )

    q_index += 1
    if q_index < len(questions):
        user_states[user_id]["q_index"] = q_index
        await message.answer(questions[q_index]["text"], reply_markup=get_keyboard(questions[q_index]))
    else:
        await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞... ‚è≥", reply_markup=ReplyKeyboardRemove())

        async with db_pool.acquire() as conn:
            rows = await conn.fetch(
                "SELECT question_id, answer FROM responses WHERE user_id = $1 AND survey_id = $2 ORDER BY id",
                user_id, survey_id
            )

        user_data = [f"–í–æ–ø—Ä–æ—Å: {next(q['text'] for q in questions if q['id']==row['question_id'])} –û—Ç–≤–µ—Ç: {row['answer']}" for row in rows]

        prompt_text = (
            "–°–¥–µ–ª–∞–π –æ—Ç—á—ë—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö **–∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å**.\n"
            "–î–æ–±–∞–≤—å –æ–±—â–∏–π –≤—ã–≤–æ–¥ –≤ –Ω–∞—á–∞–ª–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üòÑ, –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üìà, –≠–Ω–µ—Ä–≥–∏—è ‚ö°Ô∏è.\n"
            "–ö–∞–∂–¥—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ñ–æ—Ä–º–∏ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å ‚Ä¢ –∏ –¥–æ–±–∞–≤—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏.\n\n"
            + "\n\n".join(user_data)
        )

        try:
            async with httpx.AsyncClient(timeout=30) as client:
                json_data = {"contents": [{"parts": [{"text": prompt_text}]}]}
                response = await client.post(
                    "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
                    headers={"Content-Type": "application/json", "X-goog-api-key": GEMINI_API_KEY},
                    content=json.dumps(json_data, ensure_ascii=False).encode("utf-8")
                )
                result_json = response.json()
                candidates = result_json.get("candidates", [])
                if candidates and "content" in candidates[0]:
                    gemini_text = "\n".join([part.get("text", "") for part in candidates[0]["content"].get("parts", [])])
                else:
                    gemini_text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –æ—Ç Gemini."
        except Exception as e:
            gemini_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: " + str(e)

        await message.answer("üìù –í–∞—à –æ—Ç—á—ë—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        await message.answer(clean_report(gemini_text))
        del user_states[user_id]
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞:", reply_markup=start_polling_kb)

async def main():
    await init_db_pool()
    await create_tables()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
